
AVRGCC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800100  00800100  0000054c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000fd  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000542  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000252  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065c  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000244  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dc  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000090  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_18>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_20>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

0000008c <__c.1485>:
  8c:	4c 61 6d 20 4e 67 6f 63 20 43 68 69 65 6e 00        Lam Ngoc Chien.

0000009b <__c.1483>:
  9b:	45 74 68 65 72 6e 65 74 20 63 68 69 70 20 69 6e     Ethernet chip in
  ab:	69 74 0d 0a 00                                      it...

000000b0 <HexTable>:
  b0:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d0 e1       	ldi	r29, 0x10	; 16
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 31       	cpi	r26, 0x14	; 20
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 75 00 	call	0xea	; 0xea <main>
  e2:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <main>:
#include "uart.h"
#include <util/delay.h>
#include "ntAVRnet.h"
//--------------------------------------------------------------------------------------
int	main()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
	DDRC = 0xff;	//out
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
  f2:	85 bb       	out	0x15, r24	; 21
	uartInit(UART_BAUDRATE);
  f4:	60 e8       	ldi	r22, 0x80	; 128
  f6:	75 e2       	ldi	r23, 0x25	; 37
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 ad 00 	call	0x15a	; 0x15a <uartInit>
	//printf("\r\nNTTam AVR network testing with enc28j60.\r\n");
	//printf("c");
	printf("Ethernet chip init\r\n");
 100:	00 d0       	rcall	.+0      	; 0x102 <main+0x18>
 102:	8b e9       	ldi	r24, 0x9B	; 155
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ad b7       	in	r26, 0x3d	; 61
 108:	be b7       	in	r27, 0x3e	; 62
 10a:	12 96       	adiw	r26, 0x02	; 2
 10c:	9c 93       	st	X, r25
 10e:	8e 93       	st	-X, r24
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	0e 94 81 01 	call	0x302	; 0x302 <printfP>
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
	while(1)
	{
			printf("Lam Ngoc Chien");
 11a:	cc e8       	ldi	r28, 0x8C	; 140
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	00 d0       	rcall	.+0      	; 0x120 <main+0x36>
 120:	ed b7       	in	r30, 0x3d	; 61
 122:	fe b7       	in	r31, 0x3e	; 62
 124:	d2 83       	std	Z+2, r29	; 0x02
 126:	c1 83       	std	Z+1, r28	; 0x01
 128:	0e 94 81 01 	call	0x302	; 0x302 <printfP>
			ON1
 12c:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	9a e1       	ldi	r25, 0x1A	; 26
 132:	a6 e0       	ldi	r26, 0x06	; 6
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	a0 40       	sbci	r26, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x4a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x54>
 13e:	00 00       	nop
			_delay_ms(2000);
			OFF1
 140:	a8 98       	cbi	0x15, 0	; 21
 142:	8f e7       	ldi	r24, 0x7F	; 127
 144:	9a e1       	ldi	r25, 0x1A	; 26
 146:	a6 e0       	ldi	r26, 0x06	; 6
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	a0 40       	sbci	r26, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x5e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x68>
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	e2 cf       	rjmp	.-60     	; 0x11e <main+0x34>

0000015a <uartInit>:
volatile unsigned char UartRxBufferStart;
volatile unsigned char UartRxBufferLen;
static char HexTable[] PROGMEM= "0123456789ABCDEF";
//----------------------------------------------------------------------------
void uartInit(unsigned long baudrate)
{
 15a:	9b 01       	movw	r18, r22
 15c:	ac 01       	movw	r20, r24
	unsigned int bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);//
 15e:	60 5c       	subi	r22, 0xC0	; 192
 160:	7d 4b       	sbci	r23, 0xBD	; 189
 162:	80 4f       	sbci	r24, 0xF0	; 240
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	44 1f       	adc	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	44 1f       	adc	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	44 1f       	adc	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	44 1f       	adc	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	0e 94 48 02 	call	0x490	; 0x490 <__udivmodsi4>
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	30 40       	sbci	r19, 0x00	; 0
	UBRR0L = bauddiv;
 1a6:	29 b9       	out	0x09, r18	; 9
	#ifdef UBRR0H
	UBRR0H = ((bauddiv>>8) & 0x00FF);
 1a8:	30 93 90 00 	sts	0x0090, r19
	// UPM0    4	
	// USBS    3	Stop bit: 0:1 bit/1:2 bit
	// UCSZ1   2	Char size:000:5/001:6/010:7/011:8/111:9/others:reserverd
	// UCSZ0   1
	// UCPOL   0
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	80 93 95 00 	sts	0x0095, r24
	#endif
	UCR =((1 << TXEN0) | (1 << RXEN0) | (1<< RXCIE0) | (1<< TXCIE0));// 
 1b2:	88 ed       	ldi	r24, 0xD8	; 216
 1b4:	8a b9       	out	0x0a, r24	; 10
	UartTxBufferStart = 0;
 1b6:	10 92 11 01 	sts	0x0111, r1
	UartTxBufferLen = 0;
 1ba:	10 92 12 01 	sts	0x0112, r1
	UartRxBufferStart = 0;
 1be:	10 92 10 01 	sts	0x0110, r1
	UartRxBufferLen = 0;
 1c2:	10 92 13 01 	sts	0x0113, r1
	sei();
 1c6:	78 94       	sei
}
 1c8:	08 95       	ret

000001ca <__vector_20>:
//--------------------------------------------------------------------------------------
SIGNAL(SIG_UART0_TRANS)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	if(UartTxBufferLen){
 1e0:	80 91 12 01 	lds	r24, 0x0112
 1e4:	88 23       	and	r24, r24
 1e6:	b1 f0       	breq	.+44     	; 0x214 <__vector_20+0x4a>
		--UartTxBufferLen;
 1e8:	80 91 12 01 	lds	r24, 0x0112
 1ec:	81 50       	subi	r24, 0x01	; 1
 1ee:	80 93 12 01 	sts	0x0112, r24
		UDR = UartTxBuffer[UartTxBufferStart++];
 1f2:	80 91 11 01 	lds	r24, 0x0111
 1f6:	e8 e0       	ldi	r30, 0x08	; 8
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	e8 0f       	add	r30, r24
 1fc:	f1 1d       	adc	r31, r1
 1fe:	90 81       	ld	r25, Z
 200:	9c b9       	out	0x0c, r25	; 12
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 11 01 	sts	0x0111, r24
		if (UartTxBufferStart == UART_TX_BUFFER_SIZE)
 208:	80 91 11 01 	lds	r24, 0x0111
 20c:	88 30       	cpi	r24, 0x08	; 8
 20e:	11 f4       	brne	.+4      	; 0x214 <__vector_20+0x4a>
   			UartTxBufferStart = 0;
 210:	10 92 11 01 	sts	0x0111, r1
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_18>:
//--------------------------------------------------------------------------------------
SIGNAL(SIG_UART0_RECV)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	unsigned char i;
	char status,data;
	status = USR;
 240:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
 242:	9c b1       	in	r25, 0x0c	; 12
	if ((status & ((1<<FE) | (1<<UPE) | (1<<DOR))) == 0){
 244:	8c 71       	andi	r24, 0x1C	; 28
 246:	b9 f4       	brne	.+46     	; 0x276 <__vector_18+0x4c>
		if(++UartRxBufferLen == UART_RX_BUFFER_SIZE)
 248:	80 91 13 01 	lds	r24, 0x0113
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 13 01 	sts	0x0113, r24
 252:	80 91 13 01 	lds	r24, 0x0113
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	11 f4       	brne	.+4      	; 0x25e <__vector_18+0x34>
			UartRxBufferLen = UART_RX_BUFFER_SIZE;
 25a:	80 93 13 01 	sts	0x0113, r24
		i = UartRxBufferStart+UartRxBufferLen;	//Vi tri ky tu cuoi cung trong buffer
 25e:	80 91 10 01 	lds	r24, 0x0110
 262:	e0 91 13 01 	lds	r30, 0x0113
 266:	e8 0f       	add	r30, r24
		if(i > UART_RX_BUFFER_SIZE)
 268:	e9 30       	cpi	r30, 0x09	; 9
 26a:	08 f0       	brcs	.+2      	; 0x26e <__vector_18+0x44>
			i -= UART_RX_BUFFER_SIZE;
 26c:	e8 50       	subi	r30, 0x08	; 8
		UartRxBuffer[i-1] = data;
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e1 50       	subi	r30, 0x01	; 1
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	90 83       	st	Z, r25
	}
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0b be       	out	0x3b, r0	; 59
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <uartGetByte>:
//--------------------------------------------------------------------------------------
char uartGetByte(void)
{
	//
	char c;
	if(UartRxBufferLen){
 28c:	80 91 13 01 	lds	r24, 0x0113
 290:	88 23       	and	r24, r24
 292:	b1 f0       	breq	.+44     	; 0x2c0 <uartGetByte+0x34>
		UartRxBufferLen--;
 294:	80 91 13 01 	lds	r24, 0x0113
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	80 93 13 01 	sts	0x0113, r24
		c = UartRxBuffer[UartRxBufferStart++];
 29e:	90 91 10 01 	lds	r25, 0x0110
 2a2:	e0 e0       	ldi	r30, 0x00	; 0
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	e9 0f       	add	r30, r25
 2a8:	f1 1d       	adc	r31, r1
 2aa:	80 81       	ld	r24, Z
 2ac:	9f 5f       	subi	r25, 0xFF	; 255
 2ae:	90 93 10 01 	sts	0x0110, r25
		if(UartRxBufferStart == UART_RX_BUFFER_SIZE)
 2b2:	90 91 10 01 	lds	r25, 0x0110
 2b6:	98 30       	cpi	r25, 0x08	; 8
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <uartGetByte+0x36>
			UartRxBufferStart = 0;
 2ba:	10 92 10 01 	sts	0x0110, r1
 2be:	08 95       	ret
		return(c);
	}
	return(-1);
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
}
 2c2:	08 95       	ret

000002c4 <uartSendByte>:
void uartSendByte(char c)
{
	////while(!(USR & (1<<UDRE0)));
		////UDR = c;    // send character
	unsigned char i;
	if((USR & (1<<UDRE0)) && (UartTxBufferLen == 0)){	//Neu uart dang san sang va buffer trong
 2c4:	5d 9b       	sbis	0x0b, 5	; 11
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <uartSendByte+0x10>
 2c8:	90 91 12 01 	lds	r25, 0x0112
 2cc:	99 23       	and	r25, r25
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <uartSendByte+0x10>
		UDR = c;			//Gui luon
 2d0:	8c b9       	out	0x0c, r24	; 12
 2d2:	08 95       	ret
	}else{
		//Neu uart dang ban
		while(UartTxBufferLen == UART_TX_BUFFER_SIZE);	//Cho neu buffer dang day
 2d4:	90 91 12 01 	lds	r25, 0x0112
 2d8:	98 30       	cpi	r25, 0x08	; 8
 2da:	e1 f3       	breq	.-8      	; 0x2d4 <uartSendByte+0x10>
		i = UartTxBufferStart + UartTxBufferLen;
 2dc:	90 91 11 01 	lds	r25, 0x0111
 2e0:	20 91 12 01 	lds	r18, 0x0112
 2e4:	92 0f       	add	r25, r18
		UartTxBufferLen++;
 2e6:	20 91 12 01 	lds	r18, 0x0112
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	20 93 12 01 	sts	0x0112, r18
		if(i >= UART_TX_BUFFER_SIZE)
 2f0:	98 30       	cpi	r25, 0x08	; 8
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <uartSendByte+0x32>
			i -=UART_TX_BUFFER_SIZE;
 2f4:	98 50       	subi	r25, 0x08	; 8
		UartTxBuffer[i] = c;	//Ghi vao cuoi buffer
 2f6:	e8 e0       	ldi	r30, 0x08	; 8
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	e9 0f       	add	r30, r25
 2fc:	f1 1d       	adc	r31, r1
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <printfP>:
	}
}
//--------------------------------------------------------------------------------------
int printfP(const prog_char *format, ...)
{
 302:	2f 92       	push	r2
 304:	3f 92       	push	r3
 306:	4f 92       	push	r4
 308:	5f 92       	push	r5
 30a:	6f 92       	push	r6
 30c:	7f 92       	push	r7
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	df 93       	push	r29
 322:	cf 93       	push	r28
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	0f 2e       	mov	r0, r31
 32a:	f4 e1       	ldi	r31, 0x14	; 20
 32c:	6f 2e       	mov	r6, r31
 32e:	77 24       	eor	r7, r7
 330:	f0 2d       	mov	r31, r0
 332:	6c 0e       	add	r6, r28
 334:	7d 1e       	adc	r7, r29
 336:	f3 01       	movw	r30, r6
 338:	e1 90       	ld	r14, Z+
 33a:	f1 90       	ld	r15, Z+
 33c:	3f 01       	movw	r6, r30

		switch (c = pgm_read_byte(format++) )
		{
			case 'c': c = va_arg(ap,int);
			default:  uartSendByte(c); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 33e:	0f 2e       	mov	r0, r31
 340:	fa e0       	ldi	r31, 0x0A	; 10
 342:	4f 2e       	mov	r4, r31
 344:	55 24       	eor	r5, r5
 346:	f0 2d       	mov	r31, r0
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 348:	22 24       	eor	r2, r2
 34a:	33 24       	eor	r3, r3
 34c:	68 94       	set
 34e:	24 f8       	bld	r2, 4
 350:	18 c0       	rjmp	.+48     	; 0x382 <printfP+0x80>
	va_start(ap, format);
	for (;;)
	{
		while ((c = pgm_read_byte(format++) ) != '%')
		{	// Until '%' or '\0'
			if (!c)
 352:	88 23       	and	r24, r24
 354:	a1 f4       	brne	.+40     	; 0x37e <printfP+0x7c>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	7f 90       	pop	r7
 372:	6f 90       	pop	r6
 374:	5f 90       	pop	r5
 376:	4f 90       	pop	r4
 378:	3f 90       	pop	r3
 37a:	2f 90       	pop	r2
 37c:	08 95       	ret
			if (!c)
			{
				va_end(ap);
				return(0);
			}
			uartSendByte(c);
 37e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <uartSendByte>
	unsigned int u_val, div_val, base;
	va_list ap;
	va_start(ap, format);
	for (;;)
	{
		while ((c = pgm_read_byte(format++) ) != '%')
 382:	f7 01       	movw	r30, r14
 384:	08 94       	sec
 386:	e1 1c       	adc	r14, r1
 388:	f1 1c       	adc	r15, r1
 38a:	84 91       	lpm	r24, Z+
 38c:	85 32       	cpi	r24, 0x25	; 37
 38e:	09 f7       	brne	.-62     	; 0x352 <printfP+0x50>
				return(0);
			}
			uartSendByte(c);
		}

		switch (c = pgm_read_byte(format++) )
 390:	f7 01       	movw	r30, r14
 392:	08 94       	sec
 394:	e1 1c       	adc	r14, r1
 396:	f1 1c       	adc	r15, r1
 398:	e4 91       	lpm	r30, Z+
 39a:	e4 36       	cpi	r30, 0x64	; 100
 39c:	81 f0       	breq	.+32     	; 0x3be <printfP+0xbc>
 39e:	e8 37       	cpi	r30, 0x78	; 120
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <printfP+0xa2>
 3a2:	55 c0       	rjmp	.+170    	; 0x44e <printfP+0x14c>
 3a4:	e3 36       	cpi	r30, 0x63	; 99
 3a6:	39 f4       	brne	.+14     	; 0x3b6 <printfP+0xb4>
		{
			case 'c': c = va_arg(ap,int);
 3a8:	f3 01       	movw	r30, r6
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	68 0e       	add	r6, r24
 3b0:	79 1e       	adc	r7, r25
 3b2:	80 81       	ld	r24, Z
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <printfP+0xb6>
				return(0);
			}
			uartSendByte(c);
		}

		switch (c = pgm_read_byte(format++) )
 3b6:	8e 2f       	mov	r24, r30
		{
			case 'c': c = va_arg(ap,int);
			default:  uartSendByte(c); continue;
 3b8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <uartSendByte>
 3bc:	e2 cf       	rjmp	.-60     	; 0x382 <printfP+0x80>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 3be:	f3 01       	movw	r30, r6
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	68 0e       	add	r6, r24
 3c6:	79 1e       	adc	r7, r25
 3c8:	c0 80       	ld	r12, Z
 3ca:	d1 80       	ldd	r13, Z+1	; 0x01
			if (c == 'd')
			{
				if (((int)u_val) < 0)
 3cc:	dd 20       	and	r13, r13
 3ce:	3c f4       	brge	.+14     	; 0x3de <printfP+0xdc>
				{
					u_val = - u_val;
 3d0:	d0 94       	com	r13
 3d2:	c1 94       	neg	r12
 3d4:	d1 08       	sbc	r13, r1
 3d6:	d3 94       	inc	r13
					uartSendByte('-');
 3d8:	8d e2       	ldi	r24, 0x2D	; 45
 3da:	0e 94 62 01 	call	0x2c4	; 0x2c4 <uartSendByte>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 3de:	90 e1       	ldi	r25, 0x10	; 16
 3e0:	c9 16       	cp	r12, r25
 3e2:	97 e2       	ldi	r25, 0x27	; 39
 3e4:	d9 06       	cpc	r13, r25
 3e6:	88 f4       	brcc	.+34     	; 0x40a <printfP+0x108>

		switch (c = pgm_read_byte(format++) )
		{
			case 'c': c = va_arg(ap,int);
			default:  uartSendByte(c); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 3e8:	00 e1       	ldi	r16, 0x10	; 16
 3ea:	17 e2       	ldi	r17, 0x27	; 39
				if (((int)u_val) < 0)
				{
					u_val = - u_val;
					uartSendByte('-');
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 3ec:	c8 01       	movw	r24, r16
 3ee:	b2 01       	movw	r22, r4
 3f0:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodhi4>
 3f4:	8b 01       	movw	r16, r22
 3f6:	62 30       	cpi	r22, 0x02	; 2
 3f8:	71 05       	cpc	r23, r1
 3fa:	68 f0       	brcs	.+26     	; 0x416 <printfP+0x114>
 3fc:	c6 16       	cp	r12, r22
 3fe:	d7 06       	cpc	r13, r23
 400:	a8 f3       	brcs	.-22     	; 0x3ec <printfP+0xea>

		switch (c = pgm_read_byte(format++) )
		{
			case 'c': c = va_arg(ap,int);
			default:  uartSendByte(c); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 402:	c2 01       	movw	r24, r4
 404:	a4 2c       	mov	r10, r4
 406:	99 2e       	mov	r9, r25
 408:	09 c0       	rjmp	.+18     	; 0x41c <printfP+0x11a>
 40a:	c2 01       	movw	r24, r4
 40c:	a4 2c       	mov	r10, r4
 40e:	99 2e       	mov	r9, r25
 410:	00 e1       	ldi	r16, 0x10	; 16
 412:	17 e2       	ldi	r17, 0x27	; 39
 414:	03 c0       	rjmp	.+6      	; 0x41c <printfP+0x11a>
 416:	c2 01       	movw	r24, r4
 418:	a4 2c       	mov	r10, r4
 41a:	99 2e       	mov	r9, r25
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//c =pgm_read_byte(HexTable+(u_val/div_val));
				uartSendByte(pgm_read_byte(HexTable+(u_val/div_val)));
 41c:	c6 01       	movw	r24, r12
 41e:	b8 01       	movw	r22, r16
 420:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodhi4>
 424:	d8 2e       	mov	r13, r24
 426:	b9 2e       	mov	r11, r25
 428:	60 55       	subi	r22, 0x50	; 80
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	fb 01       	movw	r30, r22
 42e:	84 91       	lpm	r24, Z+
 430:	0e 94 62 01 	call	0x2c4	; 0x2c4 <uartSendByte>
				u_val %= div_val;
 434:	8d 2d       	mov	r24, r13
 436:	9b 2d       	mov	r25, r11
 438:	6c 01       	movw	r12, r24
				div_val /= base;
 43a:	c8 01       	movw	r24, r16
 43c:	6a 2d       	mov	r22, r10
 43e:	79 2d       	mov	r23, r9
 440:	0e 94 34 02 	call	0x468	; 0x468 <__udivmodhi4>
 444:	8b 01       	movw	r16, r22
			} while (div_val);
 446:	61 15       	cp	r22, r1
 448:	71 05       	cpc	r23, r1
 44a:	41 f7       	brne	.-48     	; 0x41c <printfP+0x11a>
 44c:	9a cf       	rjmp	.-204    	; 0x382 <printfP+0x80>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 44e:	f3 01       	movw	r30, r6
 450:	c0 80       	ld	r12, Z
 452:	d1 80       	ldd	r13, Z+1	; 0x01
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	68 0e       	add	r6, r24
 45a:	79 1e       	adc	r7, r25
		{
			case 'c': c = va_arg(ap,int);
			default:  uartSendByte(c); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 45c:	c1 01       	movw	r24, r2
 45e:	a2 2c       	mov	r10, r2
 460:	99 2e       	mov	r9, r25
 462:	00 e0       	ldi	r16, 0x00	; 0
 464:	10 e1       	ldi	r17, 0x10	; 16
 466:	da cf       	rjmp	.-76     	; 0x41c <printfP+0x11a>

00000468 <__udivmodhi4>:
 468:	aa 1b       	sub	r26, r26
 46a:	bb 1b       	sub	r27, r27
 46c:	51 e1       	ldi	r21, 0x11	; 17
 46e:	07 c0       	rjmp	.+14     	; 0x47e <__udivmodhi4_ep>

00000470 <__udivmodhi4_loop>:
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	a6 17       	cp	r26, r22
 476:	b7 07       	cpc	r27, r23
 478:	10 f0       	brcs	.+4      	; 0x47e <__udivmodhi4_ep>
 47a:	a6 1b       	sub	r26, r22
 47c:	b7 0b       	sbc	r27, r23

0000047e <__udivmodhi4_ep>:
 47e:	88 1f       	adc	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	5a 95       	dec	r21
 484:	a9 f7       	brne	.-22     	; 0x470 <__udivmodhi4_loop>
 486:	80 95       	com	r24
 488:	90 95       	com	r25
 48a:	bc 01       	movw	r22, r24
 48c:	cd 01       	movw	r24, r26
 48e:	08 95       	ret

00000490 <__udivmodsi4>:
 490:	a1 e2       	ldi	r26, 0x21	; 33
 492:	1a 2e       	mov	r1, r26
 494:	aa 1b       	sub	r26, r26
 496:	bb 1b       	sub	r27, r27
 498:	fd 01       	movw	r30, r26
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <__udivmodsi4_ep>

0000049c <__udivmodsi4_loop>:
 49c:	aa 1f       	adc	r26, r26
 49e:	bb 1f       	adc	r27, r27
 4a0:	ee 1f       	adc	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	a2 17       	cp	r26, r18
 4a6:	b3 07       	cpc	r27, r19
 4a8:	e4 07       	cpc	r30, r20
 4aa:	f5 07       	cpc	r31, r21
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__udivmodsi4_ep>
 4ae:	a2 1b       	sub	r26, r18
 4b0:	b3 0b       	sbc	r27, r19
 4b2:	e4 0b       	sbc	r30, r20
 4b4:	f5 0b       	sbc	r31, r21

000004b6 <__udivmodsi4_ep>:
 4b6:	66 1f       	adc	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	1a 94       	dec	r1
 4c0:	69 f7       	brne	.-38     	; 0x49c <__udivmodsi4_loop>
 4c2:	60 95       	com	r22
 4c4:	70 95       	com	r23
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	9b 01       	movw	r18, r22
 4cc:	ac 01       	movw	r20, r24
 4ce:	bd 01       	movw	r22, r26
 4d0:	cf 01       	movw	r24, r30
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
