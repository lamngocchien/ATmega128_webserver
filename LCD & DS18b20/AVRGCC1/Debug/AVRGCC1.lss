
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011a  0080011a  0000075e  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000544  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000176  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000576  00000000  00000000  000024ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a8  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000777  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00003344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e8  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000034d  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000039d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  c6:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(){
	char HNib, LNib;
	DATA_O |=0xF0;
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	80 6f       	ori	r24, 0xF0	; 240
  d2:	8b bb       	out	0x1b, r24	; 27

    DDR_DATA &=0x0F;
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	8a bb       	out	0x1a, r24	; 26
	sbi(CTRL,EN); //enable
  da:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
  dc:	db 9a       	sbi	0x1b, 3	; 27
	

	HNib=DATA_I & 0xF0;
  de:	89 b3       	in	r24, 0x19	; 25
	cbi(CTRL,EN); //disable
  e0:	db 98       	cbi	0x1b, 3	; 27

	sbi(CTRL,EN); //enable
  e2:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
  e4:	db 9a       	sbi	0x1b, 3	; 27
	LNib = DATA_I & 0xF0;
  e6:	99 b3       	in	r25, 0x19	; 25
	cbi(CTRL,EN); //disable
  e8:	db 98       	cbi	0x1b, 3	; 27
	LNib>>=4;
  ea:	92 95       	swap	r25
  ec:	9f 70       	andi	r25, 0x0F	; 15
    DDR_DATA &=0x0F;
	sbi(CTRL,EN); //enable
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
	

	HNib=DATA_I & 0xF0;
  ee:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
  f0:	89 2b       	or	r24, r25
  f2:	08 95       	ret

000000f4 <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
  f8:	28 2f       	mov	r18, r24
  fa:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  fc:	29 2b       	or	r18, r25
  fe:	2b bb       	out	0x1b, r18	; 27
	sbi(CTRL,EN); //enable
 100:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable	
 102:	db 98       	cbi	0x1b, 3	; 27

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
 104:	82 95       	swap	r24
 106:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
 108:	98 2b       	or	r25, r24
 10a:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
 10c:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
 10e:	db 98       	cbi	0x1b, 3	; 27
}
 110:	08 95       	ret

00000112 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
 112:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
 114:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
 116:	db 98       	cbi	0x1b, 3	; 27
}
 118:	08 95       	ret

0000011a <wait_LCD>:

void wait_LCD(){	
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
 128:	8e 01       	movw	r16, r28
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 12e:	d9 98       	cbi	0x1b, 1	; 27
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
 130:	da 9a       	sbi	0x1b, 2	; 27
			temp_val=Read2Nib();
 132:	0e 94 67 00 	call	0xce	; 0xce <Read2Nib>
 136:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
 138:	f8 01       	movw	r30, r16
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	bc f3       	brlt	.-18     	; 0x12e <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
 140:	da 98       	cbi	0x1b, 2	; 27
		DDR_DATA=0xFF;//Ready to Out		
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	//_delay_ms(1);
	
}
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <init_LCD>:


void init_LCD(){
	DDR_CTRL=0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 156:	8a bb       	out	0x1a, r24	; 26
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 158:	d9 98       	cbi	0x1b, 1	; 27
	cbi(CTRL, RW); // AVR->LCD
 15a:	da 98       	cbi	0x1b, 2	; 27
	cbi(CTRL, EN);
 15c:	db 98       	cbi	0x1b, 3	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 15e:	db 9a       	sbi	0x1b, 3	; 27
		sbi(DATA_O, 5); 
 160:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(CTRL,EN); //disable
 162:	db 98       	cbi	0x1b, 3	; 27
		wait_LCD();		
 164:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
		Write2Nib(0x28);//
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();	
 16e:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 172:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0E);
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();			
 17a:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 17e:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();
 186:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif
}
 18a:	08 95       	ret

0000018c <home_LCD>:

void home_LCD(){
	cbi(CTRL,RS); // the following data is COMMAND 
 18c:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();
 194:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif	
}
 198:	08 95       	ret

0000019a <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	//LCD 1602
	//Ad=64*(y-1)+(x-1)+0x80; 
	//LCD 20xx
	switch (y){
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	a0 f0       	brcs	.+40     	; 0x1c6 <move_LCD+0x2c>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	18 f0       	brcs	.+6      	; 0x1a8 <move_LCD+0xe>
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	80 f4       	brcc	.+32     	; 0x1c6 <move_LCD+0x2c>
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <move_LCD+0x1e>
	case 1:
	case 2:
		Ad=64*(y-1)+(x-1)+0x80;
 1a8:	98 2f       	mov	r25, r24
 1aa:	92 95       	swap	r25
 1ac:	99 0f       	add	r25, r25
 1ae:	99 0f       	add	r25, r25
 1b0:	90 7c       	andi	r25, 0xC0	; 192
 1b2:	96 0f       	add	r25, r22
 1b4:	91 5c       	subi	r25, 0xC1	; 193
		break;
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <move_LCD+0x2c>
	case 3:
	case 4:
		Ad=64*(y-3)+(x-1)+20+0x80;
 1b8:	98 2f       	mov	r25, r24
 1ba:	92 95       	swap	r25
 1bc:	99 0f       	add	r25, r25
 1be:	99 0f       	add	r25, r25
 1c0:	90 7c       	andi	r25, 0xC0	; 192
 1c2:	96 0f       	add	r25, r22
 1c4:	9d 52       	subi	r25, 0x2D	; 45
	default:
		break;
	
	}
	*/
	cbi(CTRL,RS); // the following data is COMMAND
 1c6:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 1c8:	89 2f       	mov	r24, r25
 1ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();
 1ce:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif	
}
 1d2:	08 95       	ret

000001d4 <clr_LCD>:

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 1d4:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();	
 1dc:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
		
	#endif	
}
 1e0:	08 95       	ret

000001e2 <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 1e2:	d9 9a       	sbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write2Nib>
		wait_LCD();	
 1e8:	0e 94 8d 00 	call	0x11a	; 0x11a <wait_LCD>
	#endif		
}
 1ec:	08 95       	ret

000001ee <print_LCD>:

void print_LCD(char* str){
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 1f6:	88 81       	ld	r24, Y
 1f8:	88 23       	and	r24, r24
 1fa:	51 f0       	breq	.+20     	; 0x210 <print_LCD+0x22>
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
 202:	1f 5f       	subi	r17, 0xFF	; 255
 204:	fe 01       	movw	r30, r28
 206:	e1 0f       	add	r30, r17
 208:	f1 1d       	adc	r31, r1
 20a:	80 81       	ld	r24, Z
 20c:	88 23       	and	r24, r24
 20e:	b9 f7       	brne	.-18     	; 0x1fe <print_LCD+0x10>
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	08 95       	ret

00000218 <therm_reset>:
#define THERM_LOW() THERM_PORT&=~(1<<THERM_DQ) 
#define THERM_HIGH() THERM_PORT|=(1<<THERM_DQ)  
uint8_t therm_reset() {
        uint8_t i;
        // Pull line low and wait for 480uS
        THERM_LOW();
 218:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
 21a:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <therm_reset+0x8>
        _delay_loop_2(960);
		
        //Release line and wait for 60uS
        THERM_INPUT_MODE();
 224:	b8 98       	cbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <therm_reset+0x10>
        _delay_loop_1(160);
		
        //Store line value and wait until the completion of 480uS period
        i=(THERM_PIN & (1<<THERM_DQ));
 22c:	86 b3       	in	r24, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22e:	e8 e4       	ldi	r30, 0x48	; 72
 230:	f3 e0       	ldi	r31, 0x03	; 3
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <therm_reset+0x1a>
        _delay_loop_2(840);
        //Return the value read from the presence pulse (0=OK, 1=WRONG)
        return i;
}
 236:	81 70       	andi	r24, 0x01	; 1
 238:	08 95       	ret

0000023a <therm_write_bit>:
 
void therm_write_bit(uint8_t bit){
        //Pull line low for 1uS
        THERM_LOW();
 23a:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
 23c:	b8 9a       	sbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 23e:	93 e0       	ldi	r25, 0x03	; 3
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <therm_write_bit+0x6>
        _delay_loop_1(3);
		
        //If we want to write 1, release the line (if not will keep low)
        if(bit) THERM_INPUT_MODE();
 244:	81 11       	cpse	r24, r1
 246:	b8 98       	cbi	0x17, 0	; 23
 248:	80 ea       	ldi	r24, 0xA0	; 160
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <therm_write_bit+0x10>
		
        //Wait for 60uS and release the line
        _delay_loop_1(160);
        THERM_INPUT_MODE();
 24e:	b8 98       	cbi	0x17, 0	; 23
}
 250:	08 95       	ret

00000252 <therm_read_bit>:
 
uint8_t therm_read_bit(void){
        uint8_t bit=0;
		
        //Pull line low for 1uS
        THERM_LOW();
 252:	c0 98       	cbi	0x18, 0	; 24
        THERM_OUTPUT_MODE();
 254:	b8 9a       	sbi	0x17, 0	; 23
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <therm_read_bit+0x6>
        _delay_loop_1(3);
 
        //Release line and wait for 14uS
        THERM_INPUT_MODE();
 25c:	b8 98       	cbi	0x17, 0	; 23
 25e:	85 e2       	ldi	r24, 0x25	; 37
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <therm_read_bit+0xe>
        _delay_loop_1(37);
 
        //Read line value
        if(THERM_PIN&(1<<THERM_DQ)) bit=1;
 264:	96 b3       	in	r25, 0x16	; 22
 266:	88 e7       	ldi	r24, 0x78	; 120
 268:	8a 95       	dec	r24
 26a:	f1 f7       	brne	.-4      	; 0x268 <therm_read_bit+0x16>
        _delay_loop_1(160);
        THERM_INPUT_MODE();
}
 
uint8_t therm_read_bit(void){
        uint8_t bit=0;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 ff       	sbrs	r25, 0
 270:	80 e0       	ldi	r24, 0x00	; 0
        //Read line value
        if(THERM_PIN&(1<<THERM_DQ)) bit=1;
        //Wait for 45uS to end and return read value
        _delay_loop_1(120);
        return bit;
}
 272:	08 95       	ret

00000274 <therm_read_byte>:
 
uint8_t therm_read_byte(void){
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	18 e0       	ldi	r17, 0x08	; 8
        uint8_t i=8, n=0;
 27a:	00 e0       	ldi	r16, 0x00	; 0
        while(i--){
                //Shift one position right and store read value
                n>>=1;
                n|=(therm_read_bit()<<7);
 27c:	0e 94 29 01 	call	0x252	; 0x252 <therm_read_bit>
 280:	87 95       	ror	r24
 282:	88 27       	eor	r24, r24
 284:	87 95       	ror	r24
 
uint8_t therm_read_byte(void){
        uint8_t i=8, n=0;
        while(i--){
                //Shift one position right and store read value
                n>>=1;
 286:	06 95       	lsr	r16
                n|=(therm_read_bit()<<7);
 288:	08 2b       	or	r16, r24
 28a:	11 50       	subi	r17, 0x01	; 1
        return bit;
}
 
uint8_t therm_read_byte(void){
        uint8_t i=8, n=0;
        while(i--){
 28c:	b9 f7       	brne	.-18     	; 0x27c <therm_read_byte+0x8>
                //Shift one position right and store read value
                n>>=1;
                n|=(therm_read_bit()<<7);
        }
        return n;
}
 28e:	80 2f       	mov	r24, r16
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <therm_write_byte>:
 
void therm_write_byte(uint8_t byte){
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	08 2f       	mov	r16, r24
 29c:	18 e0       	ldi	r17, 0x08	; 8
        uint8_t i=8;
        while(i--){
                //Write actual bit and shift one position right to make the next bit ready
                therm_write_bit(byte&1);
 29e:	80 2f       	mov	r24, r16
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	0e 94 1d 01 	call	0x23a	; 0x23a <therm_write_bit>
                byte>>=1;
 2a6:	06 95       	lsr	r16
 2a8:	11 50       	subi	r17, 0x01	; 1
        return n;
}
 
void therm_write_byte(uint8_t byte){
        uint8_t i=8;
        while(i--){
 2aa:	c9 f7       	brne	.-14     	; 0x29e <therm_write_byte+0x8>
                //Write actual bit and shift one position right to make the next bit ready
                therm_write_bit(byte&1);
                byte>>=1;
        }
}
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <therm_read_temperature>:
 
//***********************************************************************************************//
//Do chinh xac 0.0625
//Nhiet do return gap x lan gia tri thuc do duoc
void therm_read_temperature()
{ 
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
	// Buffer length must be at least 12bytes long! ["+XXX.XXXX C"
	extern uint8_t ds18b20, digit;
	uint8_t temperature[2]; 
	//Reset, skip ROM and start temperature conversion 
	therm_reset(); 
 2b6:	0e 94 0c 01 	call	0x218	; 0x218 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM); 
 2ba:	8c ec       	ldi	r24, 0xCC	; 204
 2bc:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP); 
 2c0:	84 e4       	ldi	r24, 0x44	; 68
 2c2:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	//Wait until conversion is complete 
	while(!therm_read_bit()); 
 2c6:	0e 94 29 01 	call	0x252	; 0x252 <therm_read_bit>
 2ca:	88 23       	and	r24, r24
 2cc:	e1 f3       	breq	.-8      	; 0x2c6 <therm_read_temperature+0x14>
	//Reset, skip ROM and send command to read Scratchpad 
	therm_reset(); 
 2ce:	0e 94 0c 01 	call	0x218	; 0x218 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 2d2:	8c ec       	ldi	r24, 0xCC	; 204
 2d4:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD); 
 2d8:	8e eb       	ldi	r24, 0xBE	; 190
 2da:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	//Read Scratchpad (only 2 first bytes) 
	temperature[0]=therm_read_byte(); 
 2de:	0e 94 3a 01 	call	0x274	; 0x274 <therm_read_byte>
 2e2:	18 2f       	mov	r17, r24
	temperature[1]=therm_read_byte(); 
 2e4:	0e 94 3a 01 	call	0x274	; 0x274 <therm_read_byte>
 2e8:	08 2f       	mov	r16, r24
	therm_reset(); 
 2ea:	0e 94 0c 01 	call	0x218	; 0x218 <therm_reset>
	//Store temperature integer digits and decimal digits 
	digit  = ((float)(temperature[0]&0x0f))/16*100;
 2ee:	61 2f       	mov	r22, r17
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	6f 70       	andi	r22, 0x0F	; 15
 2f4:	70 70       	andi	r23, 0x00	; 0
 2f6:	88 27       	eor	r24, r24
 2f8:	77 fd       	sbrc	r23, 7
 2fa:	80 95       	com	r24
 2fc:	98 2f       	mov	r25, r24
 2fe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__floatsisf>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e8       	ldi	r20, 0x80	; 128
 308:	5d e3       	ldi	r21, 0x3D	; 61
 30a:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	48 ec       	ldi	r20, 0xC8	; 200
 314:	52 e4       	ldi	r21, 0x42	; 66
 316:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
 31a:	0e 94 2d 02 	call	0x45a	; 0x45a <__fixunssfsi>
 31e:	60 93 1a 01 	sts	0x011A, r22
	ds18b20 = ((temperature[0]&0xf0)>>4)|((temperature[1]&0x0f)<<4);
 322:	02 95       	swap	r16
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	12 95       	swap	r17
 328:	1f 70       	andi	r17, 0x0F	; 15
 32a:	10 2b       	or	r17, r16
 32c:	10 93 1b 01 	sts	0x011B, r17
}
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	08 95       	ret

00000336 <config_ds18b20>:
	//digit=temperature[0]>>4; 
	//digit|=(temperature[1]&0x7)<<4;
	//return (digit);
//}
uint8_t config_ds18b20(uint8_t H,uint8_t L,uint8_t mode)
{
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	f8 2e       	mov	r15, r24
 33e:	06 2f       	mov	r16, r22
 340:	14 2f       	mov	r17, r20
	therm_reset(); 
 342:	0e 94 0c 01 	call	0x218	; 0x218 <therm_reset>
	therm_write_byte(0x4E);
 346:	8e e4       	ldi	r24, 0x4E	; 78
 348:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	//therm_write_byte(0xFF);
	//therm_write_byte(0xFF);
	//therm_write_byte(0x1F);
	therm_write_byte(H);
 34c:	8f 2d       	mov	r24, r15
 34e:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	therm_write_byte(L);
 352:	80 2f       	mov	r24, r16
 354:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
	therm_write_byte(mode);	
 358:	81 2f       	mov	r24, r17
 35a:	0e 94 4b 01 	call	0x296	; 0x296 <therm_write_byte>
}
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	08 95       	ret

00000366 <lcd_show_number>:
#include <stdio.h>
#include "lcd.h"
#include "1wire.h"
uint8_t ds18b20, digit;
void lcd_show_number(uint8_t val)
{
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	18 2f       	mov	r17, r24
	if(val /100 == 0 && (val %100) /10 != 0)	putChar_LCD((val %100) /10+48);
 36c:	84 36       	cpi	r24, 0x64	; 100
 36e:	68 f4       	brcc	.+26     	; 0x38a <lcd_show_number+0x24>
 370:	64 e6       	ldi	r22, 0x64	; 100
 372:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 376:	9a 30       	cpi	r25, 0x0A	; 10
 378:	b0 f0       	brcs	.+44     	; 0x3a6 <lcd_show_number+0x40>
 37a:	89 2f       	mov	r24, r25
 37c:	6a e0       	ldi	r22, 0x0A	; 10
 37e:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 382:	80 5d       	subi	r24, 0xD0	; 208
 384:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <lcd_show_number+0x40>
	else if(val /100 != 0) {putChar_LCD(val /100+48);	putChar_LCD((val %100) /10+48);}
 38a:	64 e6       	ldi	r22, 0x64	; 100
 38c:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 390:	09 2f       	mov	r16, r25
 392:	80 5d       	subi	r24, 0xD0	; 208
 394:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
 398:	80 2f       	mov	r24, r16
 39a:	6a e0       	ldi	r22, 0x0A	; 10
 39c:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 3a0:	80 5d       	subi	r24, 0xD0	; 208
 3a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
	putChar_LCD((val %100) %10+48);
 3a6:	81 2f       	mov	r24, r17
 3a8:	64 e6       	ldi	r22, 0x64	; 100
 3aa:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 3ae:	89 2f       	mov	r24, r25
 3b0:	6a e0       	ldi	r22, 0x0A	; 10
 3b2:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 3b6:	89 2f       	mov	r24, r25
 3b8:	80 5d       	subi	r24, 0xD0	; 208
 3ba:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
}
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <showtemp>:
void showtemp ()
{
 3c4:	1f 93       	push	r17
	move_LCD(1,10);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	0e 94 cd 00 	call	0x19a	; 0x19a <move_LCD>
	therm_read_temperature();
 3ce:	0e 94 59 01 	call	0x2b2	; 0x2b2 <therm_read_temperature>
	lcd_show_number(ds18b20);
 3d2:	80 91 1b 01 	lds	r24, 0x011B
 3d6:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_show_number>
	print_LCD(".");
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_LCD>
	putChar_LCD(digit/10 +48);
 3e2:	80 91 1a 01 	lds	r24, 0x011A
 3e6:	1a e0       	ldi	r17, 0x0A	; 10
 3e8:	61 2f       	mov	r22, r17
 3ea:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 3ee:	80 5d       	subi	r24, 0xD0	; 208
 3f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
	putChar_LCD(digit%10 +48);
 3f4:	80 91 1a 01 	lds	r24, 0x011A
 3f8:	61 2f       	mov	r22, r17
 3fa:	0e 94 4a 03 	call	0x694	; 0x694 <__udivmodqi4>
 3fe:	89 2f       	mov	r24, r25
 400:	80 5d       	subi	r24, 0xD0	; 208
 402:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
	putChar_LCD(0xdf);	print_LCD("C");	print_LCD(" ");
 406:	8f ed       	ldi	r24, 0xDF	; 223
 408:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <putChar_LCD>
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_LCD>
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_LCD>
	//check_auto();
	//alarm();
}
 41c:	1f 91       	pop	r17
 41e:	08 95       	ret

00000420 <SystemInit>:
void	SystemInit()
{
	//LCD
	init_LCD();
 420:	0e 94 a9 00 	call	0x152	; 0x152 <init_LCD>
	clr_LCD();
 424:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <clr_LCD>
	
	//Set PORT
	DDRC = 0xff;	//out
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
 42c:	85 bb       	out	0x15, r24	; 21
	DDRB = 0x00;	//in	
 42e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xff;
 430:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00;
 432:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff;
 434:	82 bb       	out	0x12, r24	; 18
	//set_clock();
	//TWI_DS1307_wadr(0x00); //set dia chi ve 0
	//_delay_ms(1);			//cho DS1307 xu li 
	//TWI_DS1307_rblock(tData,7); //doc ca khoi thoi gian (7 bytes)	
	//Display(); // hien thi ket qua len LCD	
}
 436:	08 95       	ret

00000438 <main>:
	//Test 20xx
	//print_LCD("Demo of the LCD ABCD");
	//move_LCD(2,1);
	//print_LCD("2x16 LCD Display ABC");
	//move_LCD(1,1);
	SystemInit();
 438:	0e 94 10 02 	call	0x420	; 0x420 <SystemInit>
	print_LCD("TEST LCD ");
 43c:	86 e0       	ldi	r24, 0x06	; 6
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_LCD>
	move_LCD(2,1);
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	0e 94 cd 00 	call	0x19a	; 0x19a <move_LCD>
	print_LCD("ATMEGA128");
 44c:	80 e1       	ldi	r24, 0x10	; 16
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_LCD>
    while(1)
    {
		showtemp ();
 454:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <showtemp>
 458:	fd cf       	rjmp	.-6      	; 0x454 <main+0x1c>

0000045a <__fixunssfsi>:
 45a:	70 d0       	rcall	.+224    	; 0x53c <__fp_splitA>
 45c:	88 f0       	brcs	.+34     	; 0x480 <__fixunssfsi+0x26>
 45e:	9f 57       	subi	r25, 0x7F	; 127
 460:	90 f0       	brcs	.+36     	; 0x486 <__fixunssfsi+0x2c>
 462:	b9 2f       	mov	r27, r25
 464:	99 27       	eor	r25, r25
 466:	b7 51       	subi	r27, 0x17	; 23
 468:	a0 f0       	brcs	.+40     	; 0x492 <__fixunssfsi+0x38>
 46a:	d1 f0       	breq	.+52     	; 0x4a0 <__fixunssfsi+0x46>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	1a f0       	brmi	.+6      	; 0x47c <__fixunssfsi+0x22>
 476:	ba 95       	dec	r27
 478:	c9 f7       	brne	.-14     	; 0x46c <__fixunssfsi+0x12>
 47a:	12 c0       	rjmp	.+36     	; 0x4a0 <__fixunssfsi+0x46>
 47c:	b1 30       	cpi	r27, 0x01	; 1
 47e:	81 f0       	breq	.+32     	; 0x4a0 <__fixunssfsi+0x46>
 480:	77 d0       	rcall	.+238    	; 0x570 <__fp_zero>
 482:	b1 e0       	ldi	r27, 0x01	; 1
 484:	08 95       	ret
 486:	74 c0       	rjmp	.+232    	; 0x570 <__fp_zero>
 488:	67 2f       	mov	r22, r23
 48a:	78 2f       	mov	r23, r24
 48c:	88 27       	eor	r24, r24
 48e:	b8 5f       	subi	r27, 0xF8	; 248
 490:	39 f0       	breq	.+14     	; 0x4a0 <__fixunssfsi+0x46>
 492:	b9 3f       	cpi	r27, 0xF9	; 249
 494:	cc f3       	brlt	.-14     	; 0x488 <__fixunssfsi+0x2e>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	b3 95       	inc	r27
 49e:	d9 f7       	brne	.-10     	; 0x496 <__fixunssfsi+0x3c>
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__fixunssfsi+0x56>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__floatunsisf>:
 4b2:	e8 94       	clt
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <__floatsisf+0x12>

000004b6 <__floatsisf>:
 4b6:	97 fb       	bst	r25, 7
 4b8:	3e f4       	brtc	.+14     	; 0x4c8 <__floatsisf+0x12>
 4ba:	90 95       	com	r25
 4bc:	80 95       	com	r24
 4be:	70 95       	com	r23
 4c0:	61 95       	neg	r22
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	8f 4f       	sbci	r24, 0xFF	; 255
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	99 23       	and	r25, r25
 4ca:	a9 f0       	breq	.+42     	; 0x4f6 <__floatsisf+0x40>
 4cc:	f9 2f       	mov	r31, r25
 4ce:	96 e9       	ldi	r25, 0x96	; 150
 4d0:	bb 27       	eor	r27, r27
 4d2:	93 95       	inc	r25
 4d4:	f6 95       	lsr	r31
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f1 11       	cpse	r31, r1
 4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <__floatsisf+0x1c>
 4e2:	fa f4       	brpl	.+62     	; 0x522 <__floatsisf+0x6c>
 4e4:	bb 0f       	add	r27, r27
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__floatsisf+0x36>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	1b c0       	rjmp	.+54     	; 0x522 <__floatsisf+0x6c>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	16 c0       	rjmp	.+44     	; 0x522 <__floatsisf+0x6c>
 4f6:	88 23       	and	r24, r24
 4f8:	11 f0       	breq	.+4      	; 0x4fe <__floatsisf+0x48>
 4fa:	96 e9       	ldi	r25, 0x96	; 150
 4fc:	11 c0       	rjmp	.+34     	; 0x520 <__floatsisf+0x6a>
 4fe:	77 23       	and	r23, r23
 500:	21 f0       	breq	.+8      	; 0x50a <__floatsisf+0x54>
 502:	9e e8       	ldi	r25, 0x8E	; 142
 504:	87 2f       	mov	r24, r23
 506:	76 2f       	mov	r23, r22
 508:	05 c0       	rjmp	.+10     	; 0x514 <__floatsisf+0x5e>
 50a:	66 23       	and	r22, r22
 50c:	71 f0       	breq	.+28     	; 0x52a <__floatsisf+0x74>
 50e:	96 e8       	ldi	r25, 0x86	; 134
 510:	86 2f       	mov	r24, r22
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	2a f0       	brmi	.+10     	; 0x522 <__floatsisf+0x6c>
 518:	9a 95       	dec	r25
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	da f7       	brpl	.-10     	; 0x518 <__floatsisf+0x62>
 522:	88 0f       	add	r24, r24
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__fp_split3>:
 52c:	57 fd       	sbrc	r21, 7
 52e:	90 58       	subi	r25, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	59 f0       	breq	.+22     	; 0x54c <__fp_splitA+0x10>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	71 f0       	breq	.+28     	; 0x556 <__fp_splitA+0x1a>
 53a:	47 95       	ror	r20

0000053c <__fp_splitA>:
 53c:	88 0f       	add	r24, r24
 53e:	97 fb       	bst	r25, 7
 540:	99 1f       	adc	r25, r25
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_splitA+0x20>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	79 f0       	breq	.+30     	; 0x566 <__fp_splitA+0x2a>
 548:	87 95       	ror	r24
 54a:	08 95       	ret
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	55 1f       	adc	r21, r21
 554:	f2 cf       	rjmp	.-28     	; 0x53a <__fp_split3+0xe>
 556:	46 95       	lsr	r20
 558:	f1 df       	rcall	.-30     	; 0x53c <__fp_splitA>
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__fp_splitA+0x30>
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	99 1f       	adc	r25, r25
 564:	f1 cf       	rjmp	.-30     	; 0x548 <__fp_splitA+0xc>
 566:	86 95       	lsr	r24
 568:	71 05       	cpc	r23, r1
 56a:	61 05       	cpc	r22, r1
 56c:	08 94       	sec
 56e:	08 95       	ret

00000570 <__fp_zero>:
 570:	e8 94       	clt

00000572 <__fp_szero>:
 572:	bb 27       	eor	r27, r27
 574:	66 27       	eor	r22, r22
 576:	77 27       	eor	r23, r23
 578:	cb 01       	movw	r24, r22
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__mulsf3>:
 57e:	0b d0       	rcall	.+22     	; 0x596 <__mulsf3x>
 580:	78 c0       	rjmp	.+240    	; 0x672 <__fp_round>
 582:	69 d0       	rcall	.+210    	; 0x656 <__fp_pscA>
 584:	28 f0       	brcs	.+10     	; 0x590 <__mulsf3+0x12>
 586:	6e d0       	rcall	.+220    	; 0x664 <__fp_pscB>
 588:	18 f0       	brcs	.+6      	; 0x590 <__mulsf3+0x12>
 58a:	95 23       	and	r25, r21
 58c:	09 f0       	breq	.+2      	; 0x590 <__mulsf3+0x12>
 58e:	5a c0       	rjmp	.+180    	; 0x644 <__fp_inf>
 590:	5f c0       	rjmp	.+190    	; 0x650 <__fp_nan>
 592:	11 24       	eor	r1, r1
 594:	ee cf       	rjmp	.-36     	; 0x572 <__fp_szero>

00000596 <__mulsf3x>:
 596:	ca df       	rcall	.-108    	; 0x52c <__fp_split3>
 598:	a0 f3       	brcs	.-24     	; 0x582 <__mulsf3+0x4>

0000059a <__mulsf3_pse>:
 59a:	95 9f       	mul	r25, r21
 59c:	d1 f3       	breq	.-12     	; 0x592 <__mulsf3+0x14>
 59e:	95 0f       	add	r25, r21
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	55 1f       	adc	r21, r21
 5a4:	62 9f       	mul	r22, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	72 9f       	mul	r23, r18
 5aa:	bb 27       	eor	r27, r27
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	63 9f       	mul	r22, r19
 5b2:	aa 27       	eor	r26, r26
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	aa 1f       	adc	r26, r26
 5ba:	64 9f       	mul	r22, r20
 5bc:	66 27       	eor	r22, r22
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	66 1f       	adc	r22, r22
 5c4:	82 9f       	mul	r24, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	73 9f       	mul	r23, r19
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	83 9f       	mul	r24, r19
 5d8:	a0 0d       	add	r26, r0
 5da:	61 1d       	adc	r22, r1
 5dc:	22 1f       	adc	r18, r18
 5de:	74 9f       	mul	r23, r20
 5e0:	33 27       	eor	r19, r19
 5e2:	a0 0d       	add	r26, r0
 5e4:	61 1d       	adc	r22, r1
 5e6:	23 1f       	adc	r18, r19
 5e8:	84 9f       	mul	r24, r20
 5ea:	60 0d       	add	r22, r0
 5ec:	21 1d       	adc	r18, r1
 5ee:	82 2f       	mov	r24, r18
 5f0:	76 2f       	mov	r23, r22
 5f2:	6a 2f       	mov	r22, r26
 5f4:	11 24       	eor	r1, r1
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	8a f0       	brmi	.+34     	; 0x61e <__mulsf3_pse+0x84>
 5fc:	e1 f0       	breq	.+56     	; 0x636 <__mulsf3_pse+0x9c>
 5fe:	88 23       	and	r24, r24
 600:	4a f0       	brmi	.+18     	; 0x614 <__mulsf3_pse+0x7a>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <__mulsf3_pse+0x64>
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	51 05       	cpc	r21, r1
 618:	70 f0       	brcs	.+28     	; 0x636 <__mulsf3_pse+0x9c>
 61a:	14 c0       	rjmp	.+40     	; 0x644 <__fp_inf>
 61c:	aa cf       	rjmp	.-172    	; 0x572 <__fp_szero>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	ec f3       	brlt	.-6      	; 0x61c <__mulsf3_pse+0x82>
 622:	98 3e       	cpi	r25, 0xE8	; 232
 624:	dc f3       	brlt	.-10     	; 0x61c <__mulsf3_pse+0x82>
 626:	86 95       	lsr	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b7 95       	ror	r27
 62e:	f7 95       	ror	r31
 630:	e7 95       	ror	r30
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	c1 f7       	brne	.-16     	; 0x626 <__mulsf3_pse+0x8c>
 636:	fe 2b       	or	r31, r30
 638:	88 0f       	add	r24, r24
 63a:	91 1d       	adc	r25, r1
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__fp_inf>:
 644:	97 f9       	bld	r25, 7
 646:	9f 67       	ori	r25, 0x7F	; 127
 648:	80 e8       	ldi	r24, 0x80	; 128
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	08 95       	ret

00000650 <__fp_nan>:
 650:	9f ef       	ldi	r25, 0xFF	; 255
 652:	80 ec       	ldi	r24, 0xC0	; 192
 654:	08 95       	ret

00000656 <__fp_pscA>:
 656:	00 24       	eor	r0, r0
 658:	0a 94       	dec	r0
 65a:	16 16       	cp	r1, r22
 65c:	17 06       	cpc	r1, r23
 65e:	18 06       	cpc	r1, r24
 660:	09 06       	cpc	r0, r25
 662:	08 95       	ret

00000664 <__fp_pscB>:
 664:	00 24       	eor	r0, r0
 666:	0a 94       	dec	r0
 668:	12 16       	cp	r1, r18
 66a:	13 06       	cpc	r1, r19
 66c:	14 06       	cpc	r1, r20
 66e:	05 06       	cpc	r0, r21
 670:	08 95       	ret

00000672 <__fp_round>:
 672:	09 2e       	mov	r0, r25
 674:	03 94       	inc	r0
 676:	00 0c       	add	r0, r0
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0xc>
 67a:	88 23       	and	r24, r24
 67c:	52 f0       	brmi	.+20     	; 0x692 <__fp_round+0x20>
 67e:	bb 0f       	add	r27, r27
 680:	40 f4       	brcc	.+16     	; 0x692 <__fp_round+0x20>
 682:	bf 2b       	or	r27, r31
 684:	11 f4       	brne	.+4      	; 0x68a <__fp_round+0x18>
 686:	60 ff       	sbrs	r22, 0
 688:	04 c0       	rjmp	.+8      	; 0x692 <__fp_round+0x20>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__udivmodqi4>:
 694:	99 1b       	sub	r25, r25
 696:	79 e0       	ldi	r23, 0x09	; 9
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <__udivmodqi4_ep>

0000069a <__udivmodqi4_loop>:
 69a:	99 1f       	adc	r25, r25
 69c:	96 17       	cp	r25, r22
 69e:	08 f0       	brcs	.+2      	; 0x6a2 <__udivmodqi4_ep>
 6a0:	96 1b       	sub	r25, r22

000006a2 <__udivmodqi4_ep>:
 6a2:	88 1f       	adc	r24, r24
 6a4:	7a 95       	dec	r23
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__udivmodqi4_loop>
 6a8:	80 95       	com	r24
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
