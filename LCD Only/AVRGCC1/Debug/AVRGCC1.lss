
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000376  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a2  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069f  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b0  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fa  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000179  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 04 01 	call	0x208	; 0x208 <main>
  b6:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(){
	char HNib, LNib;
	DATA_O |=0xF0;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 6f       	ori	r24, 0xF0	; 240
  c2:	8b bb       	out	0x1b, r24	; 27

    DDR_DATA &=0x0F;
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	8a bb       	out	0x1a, r24	; 26
	sbi(CTRL,EN); //enable
  ca:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
  cc:	db 9a       	sbi	0x1b, 3	; 27
	

	HNib=DATA_I & 0xF0;
  ce:	89 b3       	in	r24, 0x19	; 25
	cbi(CTRL,EN); //disable
  d0:	db 98       	cbi	0x1b, 3	; 27

	sbi(CTRL,EN); //enable
  d2:	db 9a       	sbi	0x1b, 3	; 27
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
  d4:	db 9a       	sbi	0x1b, 3	; 27
	LNib = DATA_I & 0xF0;
  d6:	99 b3       	in	r25, 0x19	; 25
	cbi(CTRL,EN); //disable
  d8:	db 98       	cbi	0x1b, 3	; 27
	LNib>>=4;
  da:	92 95       	swap	r25
  dc:	9f 70       	andi	r25, 0x0F	; 15
    DDR_DATA &=0x0F;
	sbi(CTRL,EN); //enable
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
	

	HNib=DATA_I & 0xF0;
  de:	80 7f       	andi	r24, 0xF0	; 240
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
	LNib = DATA_I & 0xF0;
	cbi(CTRL,EN); //disable
	LNib>>=4;
	return (HNib|LNib);
}
  e0:	89 2b       	or	r24, r25
  e2:	08 95       	ret

000000e4 <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  e4:	9b b3       	in	r25, 0x1b	; 27
  e6:	9f 70       	andi	r25, 0x0F	; 15

	HNib=chr & 0xF0;
  e8:	28 2f       	mov	r18, r24
  ea:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  ec:	29 2b       	or	r18, r25
  ee:	2b bb       	out	0x1b, r18	; 27
	sbi(CTRL,EN); //enable
  f0:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable	
  f2:	db 98       	cbi	0x1b, 3	; 27

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
  f4:	82 95       	swap	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
		
	DATA_O =(HNib |temp_data);	
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable	
	
	DATA_O =(LNib|temp_data);		
  f8:	98 2b       	or	r25, r24
  fa:	9b bb       	out	0x1b, r25	; 27
	sbi(CTRL,EN); //enable
  fc:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
  fe:	db 98       	cbi	0x1b, 3	; 27
}
 100:	08 95       	ret

00000102 <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
 102:	8b bb       	out	0x1b, r24	; 27
	sbi(CTRL,EN); //enable
 104:	db 9a       	sbi	0x1b, 3	; 27
	cbi(CTRL,EN); //disable
 106:	db 98       	cbi	0x1b, 3	; 27
}
 108:	08 95       	ret

0000010a <wait_LCD>:

void wait_LCD(){	
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	0f 92       	push	r0
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
 118:	8e 01       	movw	r16, r28
 11a:	0f 5f       	subi	r16, 0xFF	; 255
 11c:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 11e:	d9 98       	cbi	0x1b, 1	; 27
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
 120:	da 9a       	sbi	0x1b, 2	; 27
			temp_val=Read2Nib();
 122:	0e 94 5f 00 	call	0xbe	; 0xbe <Read2Nib>
 126:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
 128:	f8 01       	movw	r30, r16
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	bc f3       	brlt	.-18     	; 0x11e <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
 130:	da 98       	cbi	0x1b, 2	; 27
		DDR_DATA=0xFF;//Ready to Out		
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	//_delay_ms(1);
	
}
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <init_LCD>:


void init_LCD(){
	DDR_CTRL=0xFF;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 146:	8a bb       	out	0x1a, r24	; 26
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 148:	d9 98       	cbi	0x1b, 1	; 27
	cbi(CTRL, RW); // AVR->LCD
 14a:	da 98       	cbi	0x1b, 2	; 27
	cbi(CTRL, EN);
 14c:	db 98       	cbi	0x1b, 3	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 14e:	db 9a       	sbi	0x1b, 3	; 27
		sbi(DATA_O, 5); 
 150:	dd 9a       	sbi	0x1b, 5	; 27
		cbi(CTRL,EN); //disable
 152:	db 98       	cbi	0x1b, 3	; 27
		wait_LCD();		
 154:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
		Write2Nib(0x28);//
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();	
 15e:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 162:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x0E);
		wait_LCD();
	#else
		Write2Nib(0x0E);
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();			
 16a:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 16e:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();
 176:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif
}
 17a:	08 95       	ret

0000017c <home_LCD>:

void home_LCD(){
	cbi(CTRL,RS); // the following data is COMMAND 
 17c:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();
 184:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif	
}
 188:	08 95       	ret

0000018a <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	//LCD 1602
	//Ad=64*(y-1)+(x-1)+0x80; 
	//LCD 20xx
	switch (y){
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	a0 f0       	brcs	.+40     	; 0x1b6 <move_LCD+0x2c>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	18 f0       	brcs	.+6      	; 0x198 <move_LCD+0xe>
 192:	85 30       	cpi	r24, 0x05	; 5
 194:	80 f4       	brcc	.+32     	; 0x1b6 <move_LCD+0x2c>
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <move_LCD+0x1e>
	case 1:
	case 2:
		Ad=64*(y-1)+(x-1)+0x80;
 198:	98 2f       	mov	r25, r24
 19a:	92 95       	swap	r25
 19c:	99 0f       	add	r25, r25
 19e:	99 0f       	add	r25, r25
 1a0:	90 7c       	andi	r25, 0xC0	; 192
 1a2:	96 0f       	add	r25, r22
 1a4:	91 5c       	subi	r25, 0xC1	; 193
		break;
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <move_LCD+0x2c>
	case 3:
	case 4:
		Ad=64*(y-3)+(x-1)+20+0x80;
 1a8:	98 2f       	mov	r25, r24
 1aa:	92 95       	swap	r25
 1ac:	99 0f       	add	r25, r25
 1ae:	99 0f       	add	r25, r25
 1b0:	90 7c       	andi	r25, 0xC0	; 192
 1b2:	96 0f       	add	r25, r22
 1b4:	9d 52       	subi	r25, 0x2D	; 45
	default:
		break;
	
	}
	*/
	cbi(CTRL,RS); // the following data is COMMAND
 1b6:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 1b8:	89 2f       	mov	r24, r25
 1ba:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();
 1be:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif	
}
 1c2:	08 95       	ret

000001c4 <clr_LCD>:

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 1c4:	d9 98       	cbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();	
 1cc:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
		
	#endif	
}
 1d0:	08 95       	ret

000001d2 <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 1d2:	d9 9a       	sbi	0x1b, 1	; 27
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 1d4:	0e 94 72 00 	call	0xe4	; 0xe4 <Write2Nib>
		wait_LCD();	
 1d8:	0e 94 85 00 	call	0x10a	; 0x10a <wait_LCD>
	#endif		
}
 1dc:	08 95       	ret

000001de <print_LCD>:

void print_LCD(char* str){
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	51 f0       	breq	.+20     	; 0x200 <print_LCD+0x22>
 1ec:	10 e0       	ldi	r17, 0x00	; 0
 1ee:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <putChar_LCD>
 1f2:	1f 5f       	subi	r17, 0xFF	; 255
 1f4:	fe 01       	movw	r30, r28
 1f6:	e1 0f       	add	r30, r17
 1f8:	f1 1d       	adc	r31, r1
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	b9 f7       	brne	.-18     	; 0x1ee <print_LCD+0x10>
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	08 95       	ret

00000208 <main>:
#define ON2    setbit(PORTC,PORTC1);
#define ON3    setbit(PORTC,PORTC2);
#define ON4    setbit(PORTC,PORTC3);
int main(void)
{
	DDRC = 0xff;	//out
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xf;
 20c:	8f e0       	ldi	r24, 0x0F	; 15
 20e:	85 bb       	out	0x15, r24	; 21
	init_LCD(); 
 210:	0e 94 a1 00 	call	0x142	; 0x142 <init_LCD>
	clr_LCD(); 
 214:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <clr_LCD>
	//Test 16xx
	move_LCD(1,1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	0e 94 c5 00 	call	0x18a	; 0x18a <move_LCD>
	print_LCD("Demo of the LCD");
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 ef 00 	call	0x1de	; 0x1de <print_LCD>
	move_LCD(2,1);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	0e 94 c5 00 	call	0x18a	; 0x18a <move_LCD>
	print_LCD("2x16 LCD Display");
 230:	80 e1       	ldi	r24, 0x10	; 16
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 ef 00 	call	0x1de	; 0x1de <print_LCD>
	move_LCD(3,1);
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	0e 94 c5 00 	call	0x18a	; 0x18a <move_LCD>
		OFF3
		_delay_ms(1000);
		ON4
		_delay_ms(1000);
		OFF4
		PORTC = 0xff;
 240:	8f ef       	ldi	r24, 0xFF	; 255
	//print_LCD("ATMEGA128");
	
    while(1)
    {
		//TODO:: Please write your application code 
		ON1
 242:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f e3       	ldi	r18, 0x3F	; 63
 246:	3d e0       	ldi	r19, 0x0D	; 13
 248:	43 e0       	ldi	r20, 0x03	; 3
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x42>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x4c>
 254:	00 00       	nop
		_delay_ms(1000);
		OFF1
 256:	a8 98       	cbi	0x15, 0	; 21
 258:	2f e3       	ldi	r18, 0x3F	; 63
 25a:	3d e0       	ldi	r19, 0x0D	; 13
 25c:	43 e0       	ldi	r20, 0x03	; 3
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	30 40       	sbci	r19, 0x00	; 0
 262:	40 40       	sbci	r20, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x56>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x60>
 268:	00 00       	nop
		_delay_ms(1000);
		ON2
 26a:	a9 9a       	sbi	0x15, 1	; 21
 26c:	2f e3       	ldi	r18, 0x3F	; 63
 26e:	3d e0       	ldi	r19, 0x0D	; 13
 270:	43 e0       	ldi	r20, 0x03	; 3
 272:	21 50       	subi	r18, 0x01	; 1
 274:	30 40       	sbci	r19, 0x00	; 0
 276:	40 40       	sbci	r20, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x6a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x74>
 27c:	00 00       	nop
		_delay_ms(1000);
		OFF2
 27e:	a9 98       	cbi	0x15, 1	; 21
 280:	2f e3       	ldi	r18, 0x3F	; 63
 282:	3d e0       	ldi	r19, 0x0D	; 13
 284:	43 e0       	ldi	r20, 0x03	; 3
 286:	21 50       	subi	r18, 0x01	; 1
 288:	30 40       	sbci	r19, 0x00	; 0
 28a:	40 40       	sbci	r20, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x7e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x88>
 290:	00 00       	nop
		_delay_ms(1000);
		ON3
 292:	aa 9a       	sbi	0x15, 2	; 21
 294:	2f e3       	ldi	r18, 0x3F	; 63
 296:	3d e0       	ldi	r19, 0x0D	; 13
 298:	43 e0       	ldi	r20, 0x03	; 3
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	30 40       	sbci	r19, 0x00	; 0
 29e:	40 40       	sbci	r20, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x92>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x9c>
 2a4:	00 00       	nop
		_delay_ms(1000);
		OFF3
 2a6:	aa 98       	cbi	0x15, 2	; 21
 2a8:	2f e3       	ldi	r18, 0x3F	; 63
 2aa:	3d e0       	ldi	r19, 0x0D	; 13
 2ac:	43 e0       	ldi	r20, 0x03	; 3
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	30 40       	sbci	r19, 0x00	; 0
 2b2:	40 40       	sbci	r20, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0xa6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xb0>
 2b8:	00 00       	nop
		_delay_ms(1000);
		ON4
 2ba:	ab 9a       	sbi	0x15, 3	; 21
 2bc:	2f e3       	ldi	r18, 0x3F	; 63
 2be:	3d e0       	ldi	r19, 0x0D	; 13
 2c0:	43 e0       	ldi	r20, 0x03	; 3
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	30 40       	sbci	r19, 0x00	; 0
 2c6:	40 40       	sbci	r20, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0xba>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0xc4>
 2cc:	00 00       	nop
		_delay_ms(1000);
		OFF4
 2ce:	ab 98       	cbi	0x15, 3	; 21
		PORTC = 0xff;
 2d0:	85 bb       	out	0x15, r24	; 21
 2d2:	2f e3       	ldi	r18, 0x3F	; 63
 2d4:	3d e0       	ldi	r19, 0x0D	; 13
 2d6:	43 e0       	ldi	r20, 0x03	; 3
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	30 40       	sbci	r19, 0x00	; 0
 2dc:	40 40       	sbci	r20, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xd0>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xda>
 2e2:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x00;
 2e4:	15 ba       	out	0x15, r1	; 21
 2e6:	2f e3       	ldi	r18, 0x3F	; 63
 2e8:	3d e0       	ldi	r19, 0x0D	; 13
 2ea:	43 e0       	ldi	r20, 0x03	; 3
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	30 40       	sbci	r19, 0x00	; 0
 2f0:	40 40       	sbci	r20, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0xe4>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0xee>
 2f6:	00 00       	nop
        _delay_ms(1000);
		PORTC = 0xff;
 2f8:	85 bb       	out	0x15, r24	; 21
 2fa:	2f e3       	ldi	r18, 0x3F	; 63
 2fc:	3d e0       	ldi	r19, 0x0D	; 13
 2fe:	43 e0       	ldi	r20, 0x03	; 3
 300:	21 50       	subi	r18, 0x01	; 1
 302:	30 40       	sbci	r19, 0x00	; 0
 304:	40 40       	sbci	r20, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0xf8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x102>
 30a:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x00;
 30c:	15 ba       	out	0x15, r1	; 21
 30e:	2f e3       	ldi	r18, 0x3F	; 63
 310:	3d e0       	ldi	r19, 0x0D	; 13
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	21 50       	subi	r18, 0x01	; 1
 316:	30 40       	sbci	r19, 0x00	; 0
 318:	40 40       	sbci	r20, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x10c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x116>
 31e:	00 00       	nop
        _delay_ms(1000);
		PORTC = 0xff;
 320:	85 bb       	out	0x15, r24	; 21
 322:	2f e3       	ldi	r18, 0x3F	; 63
 324:	3d e0       	ldi	r19, 0x0D	; 13
 326:	43 e0       	ldi	r20, 0x03	; 3
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	30 40       	sbci	r19, 0x00	; 0
 32c:	40 40       	sbci	r20, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x120>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x12a>
 332:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x00;
 334:	15 ba       	out	0x15, r1	; 21
		PORTC = 0xff;
 336:	85 bb       	out	0x15, r24	; 21
 338:	2f e3       	ldi	r18, 0x3F	; 63
 33a:	3d e0       	ldi	r19, 0x0D	; 13
 33c:	43 e0       	ldi	r20, 0x03	; 3
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	30 40       	sbci	r19, 0x00	; 0
 342:	40 40       	sbci	r20, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x136>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x140>
 348:	00 00       	nop
		_delay_ms(1000);
		PORTC = 0x00;
 34a:	15 ba       	out	0x15, r1	; 21
 34c:	2f e3       	ldi	r18, 0x3F	; 63
 34e:	3d e0       	ldi	r19, 0x0D	; 13
 350:	43 e0       	ldi	r20, 0x03	; 3
 352:	21 50       	subi	r18, 0x01	; 1
 354:	30 40       	sbci	r19, 0x00	; 0
 356:	40 40       	sbci	r20, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x14a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x154>
 35c:	00 00       	nop
 35e:	2f e3       	ldi	r18, 0x3F	; 63
 360:	3d e0       	ldi	r19, 0x0D	; 13
 362:	43 e0       	ldi	r20, 0x03	; 3
 364:	21 50       	subi	r18, 0x01	; 1
 366:	30 40       	sbci	r19, 0x00	; 0
 368:	40 40       	sbci	r20, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x15c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x166>
 36e:	00 00       	nop
 370:	68 cf       	rjmp	.-304    	; 0x242 <main+0x3a>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
